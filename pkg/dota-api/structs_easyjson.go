// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dota_api

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi(in *jlexer.Lexer, out *Unit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "unitname":
			out.Name = string(in.String())
		case "item_0":
			out.Item0 = uint(in.Uint())
		case "item_1":
			out.Item1 = uint(in.Uint())
		case "item_2":
			out.Item2 = uint(in.Uint())
		case "item_3":
			out.Item3 = uint(in.Uint())
		case "item_4":
			out.Item4 = uint(in.Uint())
		case "item_5":
			out.Item5 = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi(out *jwriter.Writer, in Unit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"unitname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"item_0\":"
		out.RawString(prefix)
		out.Uint(uint(in.Item0))
	}
	{
		const prefix string = ",\"item_1\":"
		out.RawString(prefix)
		out.Uint(uint(in.Item1))
	}
	{
		const prefix string = ",\"item_2\":"
		out.RawString(prefix)
		out.Uint(uint(in.Item2))
	}
	{
		const prefix string = ",\"item_3\":"
		out.RawString(prefix)
		out.Uint(uint(in.Item3))
	}
	{
		const prefix string = ",\"item_4\":"
		out.RawString(prefix)
		out.Uint(uint(in.Item4))
	}
	{
		const prefix string = ",\"item_5\":"
		out.RawString(prefix)
		out.Uint(uint(in.Item5))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Unit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Unit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Unit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Unit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi(l, v)
}
func easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi1(in *jlexer.Lexer, out *Player) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = AccountId(in.Uint32())
		case "player_slot":
			out.PlayerSlot = PlayerSlot(in.Uint8())
		case "hero_id":
			out.HeroId = uint(in.Uint())
		case "item_0":
			out.Item0 = uint(in.Uint())
		case "item_1":
			out.Item1 = uint(in.Uint())
		case "item_2":
			out.Item2 = uint(in.Uint())
		case "item_3":
			out.Item3 = uint(in.Uint())
		case "item_4":
			out.Item4 = uint(in.Uint())
		case "item_5":
			out.Item5 = uint(in.Uint())
		case "kills":
			out.Kills = uint(in.Uint())
		case "deaths":
			out.Deaths = uint(in.Uint())
		case "assists":
			out.Assists = uint(in.Uint())
		case "leaver_status":
			out.LeaverStatus = LeaverStatus(in.Uint())
		case "gold":
			out.GoldRemaining = uint(in.Uint())
		case "last_hits":
			out.LastHits = uint(in.Uint())
		case "denies":
			out.Denies = uint(in.Uint())
		case "gold_per_min":
			out.GPM = uint(in.Uint())
		case "xp_per_min":
			out.XPM = uint(in.Uint())
		case "gold_spent":
			out.GoldSpent = uint(in.Uint())
		case "hero_damage":
			out.HeroDamage = uint(in.Uint())
		case "tower_damage":
			out.TowerDamage = uint(in.Uint())
		case "hero_healing":
			out.HeroHealing = uint(in.Uint())
		case "level":
			out.Level = uint(in.Uint())
		case "ability_upgrades":
			if in.IsNull() {
				in.Skip()
				out.Abilities = nil
			} else {
				in.Delim('[')
				if out.Abilities == nil {
					if !in.IsDelim(']') {
						out.Abilities = make([]Ability, 0, 2)
					} else {
						out.Abilities = []Ability{}
					}
				} else {
					out.Abilities = (out.Abilities)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Ability
					(v1).UnmarshalEasyJSON(in)
					out.Abilities = append(out.Abilities, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "additional_units":
			if in.IsNull() {
				in.Skip()
				out.Units = nil
			} else {
				in.Delim('[')
				if out.Units == nil {
					if !in.IsDelim(']') {
						out.Units = make([]Unit, 0, 1)
					} else {
						out.Units = []Unit{}
					}
				} else {
					out.Units = (out.Units)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Unit
					(v2).UnmarshalEasyJSON(in)
					out.Units = append(out.Units, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi1(out *jwriter.Writer, in Player) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account_id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.AccountId))
	}
	{
		const prefix string = ",\"player_slot\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.PlayerSlot))
	}
	{
		const prefix string = ",\"hero_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.HeroId))
	}
	{
		const prefix string = ",\"item_0\":"
		out.RawString(prefix)
		out.Uint(uint(in.Item0))
	}
	{
		const prefix string = ",\"item_1\":"
		out.RawString(prefix)
		out.Uint(uint(in.Item1))
	}
	{
		const prefix string = ",\"item_2\":"
		out.RawString(prefix)
		out.Uint(uint(in.Item2))
	}
	{
		const prefix string = ",\"item_3\":"
		out.RawString(prefix)
		out.Uint(uint(in.Item3))
	}
	{
		const prefix string = ",\"item_4\":"
		out.RawString(prefix)
		out.Uint(uint(in.Item4))
	}
	{
		const prefix string = ",\"item_5\":"
		out.RawString(prefix)
		out.Uint(uint(in.Item5))
	}
	{
		const prefix string = ",\"kills\":"
		out.RawString(prefix)
		out.Uint(uint(in.Kills))
	}
	{
		const prefix string = ",\"deaths\":"
		out.RawString(prefix)
		out.Uint(uint(in.Deaths))
	}
	{
		const prefix string = ",\"assists\":"
		out.RawString(prefix)
		out.Uint(uint(in.Assists))
	}
	{
		const prefix string = ",\"leaver_status\":"
		out.RawString(prefix)
		out.Uint(uint(in.LeaverStatus))
	}
	{
		const prefix string = ",\"gold\":"
		out.RawString(prefix)
		out.Uint(uint(in.GoldRemaining))
	}
	{
		const prefix string = ",\"last_hits\":"
		out.RawString(prefix)
		out.Uint(uint(in.LastHits))
	}
	{
		const prefix string = ",\"denies\":"
		out.RawString(prefix)
		out.Uint(uint(in.Denies))
	}
	{
		const prefix string = ",\"gold_per_min\":"
		out.RawString(prefix)
		out.Uint(uint(in.GPM))
	}
	{
		const prefix string = ",\"xp_per_min\":"
		out.RawString(prefix)
		out.Uint(uint(in.XPM))
	}
	{
		const prefix string = ",\"gold_spent\":"
		out.RawString(prefix)
		out.Uint(uint(in.GoldSpent))
	}
	{
		const prefix string = ",\"hero_damage\":"
		out.RawString(prefix)
		out.Uint(uint(in.HeroDamage))
	}
	{
		const prefix string = ",\"tower_damage\":"
		out.RawString(prefix)
		out.Uint(uint(in.TowerDamage))
	}
	{
		const prefix string = ",\"hero_healing\":"
		out.RawString(prefix)
		out.Uint(uint(in.HeroHealing))
	}
	{
		const prefix string = ",\"level\":"
		out.RawString(prefix)
		out.Uint(uint(in.Level))
	}
	{
		const prefix string = ",\"ability_upgrades\":"
		out.RawString(prefix)
		if in.Abilities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Abilities {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Units) != 0 {
		const prefix string = ",\"additional_units\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.Units {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Player) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Player) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Player) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Player) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi1(l, v)
}
func easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi2(in *jlexer.Lexer, out *PickBan) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "is_pick":
			out.IsPick = bool(in.Bool())
		case "hero_id":
			out.HeroId = uint(in.Uint())
		case "team":
			out.Team = Team(in.Uint())
		case "order":
			out.Order = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi2(out *jwriter.Writer, in PickBan) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"is_pick\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsPick))
	}
	{
		const prefix string = ",\"hero_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.HeroId))
	}
	{
		const prefix string = ",\"team\":"
		out.RawString(prefix)
		out.Uint(uint(in.Team))
	}
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix)
		out.Uint(uint(in.Order))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PickBan) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PickBan) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PickBan) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PickBan) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi2(l, v)
}
func easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi3(in *jlexer.Lexer, out *MatchResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Error = string(in.String())
		case "players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if out.Players == nil {
					if !in.IsDelim(']') {
						out.Players = make([]Player, 0, 1)
					} else {
						out.Players = []Player{}
					}
				} else {
					out.Players = (out.Players)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Player
					(v7).UnmarshalEasyJSON(in)
					out.Players = append(out.Players, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "item_0":
			out.Season = uint(in.Uint())
		case "radiant_win":
			out.RadiantWin = bool(in.Bool())
		case "duration":
			out.Duration = uint(in.Uint())
		case "start_time":
			out.MatchStart = uint(in.Uint())
		case "match_id":
			out.MatchId = MatchId(in.Int64())
		case "match_seq_num":
			out.MatchSequenceNo = MatchSequenceNo(in.Int64())
		case "tower_status_radiant":
			out.TowerStatusRadiant = TowerStatus(in.Uint16())
		case "tower_status_dire":
			out.TowerStatusDire = TowerStatus(in.Uint16())
		case "barracks_status_radiant":
			out.BarracksStatusRadiant = BarracksStatus(in.Uint16())
		case "barracks_status_dire":
			out.BarracksStatusDire = BarracksStatus(in.Uint16())
		case "cluster":
			out.Cluster = uint(in.Uint())
		case "first_blood_time":
			out.FirstBloodTime = int(in.Int())
		case "lobby_type":
			out.LobbyType = LobbyType(in.Int())
		case "human_players":
			out.HumanPlayers = uint(in.Uint())
		case "leagueid":
			out.LeagueId = uint(in.Uint())
		case "positive_votes":
			out.PositiveVotes = uint(in.Uint())
		case "negative_votes":
			out.NegativeVotes = uint(in.Uint())
		case "game_mode":
			out.GameMode = GameMode(in.Int())
		case "picks_bans":
			if in.IsNull() {
				in.Skip()
				out.PicksBans = nil
			} else {
				in.Delim('[')
				if out.PicksBans == nil {
					if !in.IsDelim(']') {
						out.PicksBans = make([]PickBan, 0, 2)
					} else {
						out.PicksBans = []PickBan{}
					}
				} else {
					out.PicksBans = (out.PicksBans)[:0]
				}
				for !in.IsDelim(']') {
					var v8 PickBan
					(v8).UnmarshalEasyJSON(in)
					out.PicksBans = append(out.PicksBans, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi3(out *jwriter.Writer, in MatchResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix[1:])
		out.String(string(in.Error))
	}
	{
		const prefix string = ",\"players\":"
		out.RawString(prefix)
		if in.Players == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Players {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Season != 0 {
		const prefix string = ",\"item_0\":"
		out.RawString(prefix)
		out.Uint(uint(in.Season))
	}
	{
		const prefix string = ",\"radiant_win\":"
		out.RawString(prefix)
		out.Bool(bool(in.RadiantWin))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Uint(uint(in.Duration))
	}
	{
		const prefix string = ",\"start_time\":"
		out.RawString(prefix)
		out.Uint(uint(in.MatchStart))
	}
	{
		const prefix string = ",\"match_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.MatchId))
	}
	{
		const prefix string = ",\"match_seq_num\":"
		out.RawString(prefix)
		out.Int64(int64(in.MatchSequenceNo))
	}
	{
		const prefix string = ",\"tower_status_radiant\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.TowerStatusRadiant))
	}
	{
		const prefix string = ",\"tower_status_dire\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.TowerStatusDire))
	}
	{
		const prefix string = ",\"barracks_status_radiant\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.BarracksStatusRadiant))
	}
	{
		const prefix string = ",\"barracks_status_dire\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.BarracksStatusDire))
	}
	{
		const prefix string = ",\"cluster\":"
		out.RawString(prefix)
		out.Uint(uint(in.Cluster))
	}
	{
		const prefix string = ",\"first_blood_time\":"
		out.RawString(prefix)
		out.Int(int(in.FirstBloodTime))
	}
	{
		const prefix string = ",\"lobby_type\":"
		out.RawString(prefix)
		out.Int(int(in.LobbyType))
	}
	{
		const prefix string = ",\"human_players\":"
		out.RawString(prefix)
		out.Uint(uint(in.HumanPlayers))
	}
	{
		const prefix string = ",\"leagueid\":"
		out.RawString(prefix)
		out.Uint(uint(in.LeagueId))
	}
	{
		const prefix string = ",\"positive_votes\":"
		out.RawString(prefix)
		out.Uint(uint(in.PositiveVotes))
	}
	{
		const prefix string = ",\"negative_votes\":"
		out.RawString(prefix)
		out.Uint(uint(in.NegativeVotes))
	}
	{
		const prefix string = ",\"game_mode\":"
		out.RawString(prefix)
		out.Int(int(in.GameMode))
	}
	if len(in.PicksBans) != 0 {
		const prefix string = ",\"picks_bans\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.PicksBans {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MatchResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MatchResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MatchResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MatchResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi3(l, v)
}
func easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi4(in *jlexer.Lexer, out *MatchHistoryBySequenceNo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "matches":
			if in.IsNull() {
				in.Skip()
				out.MatchesResult = nil
			} else {
				in.Delim('[')
				if out.MatchesResult == nil {
					if !in.IsDelim(']') {
						out.MatchesResult = make([]MatchResult, 0, 1)
					} else {
						out.MatchesResult = []MatchResult{}
					}
				} else {
					out.MatchesResult = (out.MatchesResult)[:0]
				}
				for !in.IsDelim(']') {
					var v13 MatchResult
					(v13).UnmarshalEasyJSON(in)
					out.MatchesResult = append(out.MatchesResult, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "status":
			out.Status = int(in.Int())
		case "statusDetail":
			out.StatusDetail = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi4(out *jwriter.Writer, in MatchHistoryBySequenceNo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"matches\":"
		out.RawString(prefix[1:])
		if in.MatchesResult == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.MatchesResult {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"statusDetail\":"
		out.RawString(prefix)
		out.String(string(in.StatusDetail))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MatchHistoryBySequenceNo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MatchHistoryBySequenceNo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MatchHistoryBySequenceNo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MatchHistoryBySequenceNo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi4(l, v)
}
func easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi5(in *jlexer.Lexer, out *Ability) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ability":
			out.Id = uint(in.Uint())
		case "time":
			out.TimeUpgraded = int(in.Int())
		case "level":
			out.Level = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi5(out *jwriter.Writer, in Ability) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ability\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int(int(in.TimeUpgraded))
	}
	{
		const prefix string = ",\"level\":"
		out.RawString(prefix)
		out.Uint(uint(in.Level))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ability) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ability) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ability) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ability) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi5(l, v)
}
func easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi6(in *jlexer.Lexer, out *APIResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Result).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi6(out *jwriter.Writer, in APIResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix[1:])
		out.Raw((in.Result).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComGoDotoGoDotoPkgDotaApi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComGoDotoGoDotoPkgDotaApi6(l, v)
}
